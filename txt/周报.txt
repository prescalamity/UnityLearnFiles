0307周报，关于T16攻速性能问题，和项目组讨论使用摊帧进行优化，首先少飞说数据线的计算优化，结论是不行的，如果在更新游戏数据使用摊帧优化的话，要修改游戏战斗实现方式非常麻烦，
而且后续推行用laya不用u3d端了，做这个没意义了，实际玩家很少能玩到攻速很快的情况。

为了确定玩家真实的后期游戏性能情况，和凯宁测试了下：根据策划计算，协同模式理论上，每合成一个7星需要64个1星，召唤64次，一共需要20150sp，要到34关才可以获得这么多sp。
所以，如果队伍里没有升星的英雄，多召唤的英雄，加sp的英雄的话，需要到34关才集齐一个七星英雄的资源。

而协同模式玩家通关，后期非主流组合一般到30左右，主流队伍一般能到50~70回合左右（配合差的50左右，配合好的70左右）。使用最理想的队伍（队伍里有升星，多召唤，加sp的英雄），
配合好，加一定运气可以过100回合左右及以上。而场上英雄星数后期1~7星都可能有，其中7星英雄两边加起来一般4-7个左右。（理论上70回合一供可获得72000sp，约3.6个7星英雄）。

性能方面，使用4G运行内存配置的手机，测了几组卡牌组合，其中对于没有升星，多召唤，加sp的英雄的组合，一般过10几关就结束了，而运气好点能到30几关，此时游戏帧率一般在25~30左右
性能还算稳定。而在有升星，多召唤，加sp的英雄的组合，加上玩家配合好时，在游戏后期（按70回合算）观察结果，帧率普遍在22帧以上，每回合有1到2帧在20帧一下，
游戏表现看画面还算流畅，没有明显的卡顿。

关于H2项目android和ios提供多语言获取语言支持接口，主要过程为将从Unity的（Android、iOS）baselib多语言代码同步到H5的（Android、iOS）baselib，其过程中学习了H5和Android、ios的交互问题。
在JS与AndroidJava的交互中，主要原理如下图所示，

在H5项目中，PlatformSDK模块使用PlatformClass.createClass("com.qdazzleh5.JSBridge")接口来创建一个Java的JSBridge脚本代理，在H5使用时传入Java中的函数名（如，"CallPlatformFunc"函数），
以及字符参数（在多参数时使用Json字符参数）。

在Android的Java方面，将写好的游戏语言获取与保存接口托管到PlatformInterfaceDelegation对象中，并注册到PlatformInterfaceManager单例。而JSBridge类则通过
PlatformInterfaceManager.Inctance().CallPlatformFunc()接口调用注册到PlatformInterfaceManager单例中的目标函数。

同样，当平台为iOS时，H5中的PlatformSDK模块也会创建一个OC的JSBridge脚本代理，在OC的JSBridge中，将要调用的目标函数在InitCallPlatform函数中进行注册，在H5调用OC的
JSBridge.CallPlatformFunc接口时，将运行传入（Json化的）参数中对应的已注册目标函数。

之后继续看了下T16项目的模型打包代码，为减少网络传输资源大小和资源数量等需求，需要对unity中的项目资源（如：模型，特效，ui，场景，声音，shader等）进行AssetBundle打包，
且打包后资源大小不会增加。
如，对于模型打包主要通过ModelBundleTool模块进行，实现项目中的Assets/_Resources/model下的模型资源进行整体或指定单个打包，并将打包后的bundle放于StreamingAssets/assetbundle
路径下的对应平台中。实现时主要考虑将依赖的公共资源打成一个包减少打包后模型资源，以及在全打包时对于没有改变的模型资源不进行打包以提高打包效率。
主要代码实现：
Init()    {                       初始化相关数据列表
      SrcDir                    设置项目要打包的模型资源位置
      m_NeedRebuild     清空需要重打包模型列表
}

Build()                   打包游戏资源

CheckVersion()      检查资源版本，将需要重新打包的资源加入m_NeedRebuild列表

BuildBundle()         将模型公共资源和个例资源分开打包

CreateCommonResBundle()  创建公共资源包

CreateBundleForFile()           根据模型动画，皮肤，骨骼等类型分别打包

CreateMutilSkinnedMeshBundle(fbxPath, typeDir)        换装模型打包，多skinnedmeshrender 模型打包

CreateSingleSkinnedMeshBundle(fbxPath, typeDir)       单皮肤模型打包

CreateFashionPartBundle(fbxPath, typeDir)                   模型武器 等 换装资源打包

CreateItemBundle(fbxPath, typeDir)                              收集物模型打包，有动画，或没有动画

CreatePrefabBundle()                                                    创建预设体模型打包

GenerateModelConfig()                                                生成模型lua配置文件，保存目标模型的名字，预设，骨骼，动画，部件等属性信息





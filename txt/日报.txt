=build（）start ============================================================
场景打包前更新shader渲染
场景的预设 ShaderGlobalControl  prefab
场景版本是否更新，打包要判断所有依赖文件的版本号，使资源版本不变的资源，提高打包效率
在打包前判断是否需要重新烘焙场景，合并光照贴图和shadowmask贴图，保存场景修改，
检查并删除场景更新后没用的依赖资源。

==DoScene（）start===========================================================================
（做打包时检查场景的资源是否符合优化，并打包）
检测场景的反射探头模式是否为runtime以及反射探头的数量超出限制的，为runtime则返回false，
删除未激活物体，删除mesh为空的组件，删除非Collider下的组件[Collider]，
物体[" + rd.gameObject.name + "]含有MeshRender组件却没有和MeshFilter配合使用或者材质球为空，将被删除，
场景的结点 中使用的材质使用的shader的名字不包含 Q/Scene, 请检查使用是否合理，
再prefab制作过程中，当删除prefab节点时，可能会产生多余的依赖引用，打包时需清理引擎资源库资源中冗余依赖的prefab资源，
保存场景修改，
调用BuildPipeline.BuildAssetBundles(outputPath, op, EditorUserBuildSettings.activeBuildTarget)接口，打包当前场景资源到
项目的Application.dataPath/StreamingAssets下的对应目录中。
删除在创建场景中临时创建的过度预设和文件资源。
==DoScene（）end===========================================================================

==BuildSceneBundle（）start==============================================================
将打包后的场景大小信息通过wwwfrom和www类在update中上传只服务器，监控场景版本的异常。
删除项目StreamingAssets路径下的就的场景资源信息，优化内存资源。
将打包的场景版本名字信息保存到项目Application.dataPath + "/../abNameForScene.json"文件中，以便打包场景版本和AB包进行管理
==BuildSceneBundle（）end==============================================================

==GenerateAllSceneEffectConfig()  start============================================================
生成场景特效信息（包括特效名字、AOI同步类型、hash值、特效等级、场景位置、旋转、大小）的lua配置文件，
并保存到luaPath + "/config/sceneinfo/effects/effect_info_{0}.lua"， 以便通过lua脚本对场景特效进行控制。
==GenerateAllSceneEffectConfig()  end============================================================

=build（）end ============================================================































今天先是看了T16项目中英雄的攻击代码，主要是在SceneData：Update中在满足间隔时间（调整角色状态的刷新频率，减少性能开销）后刷新下怪物、英雄状态，依次遍历hero_tables中的
HeroData实例对象（即英雄类对象）的UpdateDate()函数，并在其中刷新当前角色英雄对象的攻击。只是进行一次攻击考虑的情况还是比较多的，需要经过很多的属性评断，如当前角色是否可以攻击，
并根据自身攻击类型获取该次攻击的怪物对象（如获得离终点最近的对象，血量最大的怪物，，，虽然代码上攻击最近的小怪和随机攻击小怪是同一种处理），在获取到攻击对象后根据攻击速度进行多次攻击，
因为当前攻击刷新是有间隔的，而每次攻击从技能池中取出对应技能进行释放表现，并经过一系列的buff计算此次伤害，最后调用怪物对象的MonsterData:BeAttacked()函数进行伤害结算，
其表现在怪物被伤害时更新并显示血条较少状态。

之后了解了下本周任务需求详情，并将其添加到禅道。


=================================================================================

0130日报，为了继续优化T16的游戏性能，根据profiler面板的游戏测试数据表明在优化游戏飘字功能后，游戏帧率较低时一般游戏场景数据的更新模块SceneDate.Update耗时又是较高的，
进一步测试游戏战斗性能如下列图示：
（关闭飘字功能，上场14个英雄且其 Lv为5、星级攻速为1，测试结果相对稳定30帧率）

（关闭飘字功能，上场14个英雄且其 Lv为5、星级攻速为3，测试结果帧率变化较大）

（关闭飘字功能，上场14个英雄且其 Lv为5、星级攻速为3，测试结果帧率非常不稳定）

而定位到游戏SceneDate:UpdateFrame函数，阅读其代码主要实现功能有：用户操作，英雄的刷新、删除；怪物创建逻辑 、状态刷新，如离终点距离顺序，AI逻辑。
且其中以英雄、怪物更新，对象表的清理最为耗时，因为其耗时较为零碎优化难度大，具体优化有待深入研究功能模块。


=================================================================================

0129日报，首先之前预创建500飘字对象Editor下很卡而真机测试正常的原因，是因为unity编辑器同时打开了 Game和Scene窗口导致的，关闭Scene窗口游戏就正常稳定30帧了，
继续真机测试使用预创建对象的策略和限制单帧最高飘字方法，在游戏测试结果统计可知，单帧最高飘字需求上限为30+，而主要飘字需求为1~15帧，因此为减少飘字对象的创建总量，
且在飘字效果没有明显区别的情况下，设置单帧飘字上限为15个。。。。

而预创建飘字对象后的单次飘字对象调用函数的耗时平均0.65ms左右，如下图某帧飘字对象调用函数情况所示：

总体游戏性能如下图所示，在第一段中主要为游戏上场14个Lv5而星级攻速为1的英雄，其帧率平稳相对平稳30帧。而第二段主要为14个 Lv5而星级攻速为6的英雄，
其帧率主要在24~30帧变化。而查看profiler面板，在帧率较低时一般游戏SceneDate.Update的代码块耗时相对较高。

=================================================================================

今天，继续搞了下T16的飘字对象池的性能问题，并用UWA本地工具测试了下T16的性能问题，不过除了可以确认游戏内存确实没有明显泄漏外，对于游戏帧率问题并没有太大的帮助。

继续测试飘字池配置，如在Editor下预先创建500个对象放于对象池，但游戏战斗不飘字时，也会导致游戏异常卡顿，其平均帧率只有10帧左右（不过后面真机测试反应结果当预加载500飘字对象
放于对象池其帧率并没有受飘字对象影响的那么明显）。。而看预创建lua代码，只是创建了lua对象并没有C#代码以及update的更新。理论游戏应该只是增加一定内存而帧率不变。

因为从图中看Editor下在profiler面板CPU栏目游戏的实际帧率性能有着偏差。为了测试游戏在安卓手机的真实效果，将打包修改后的Lua打包替换已安装在真机中的T16路径下的Lua脚本pak。
并分别测试不同预加载数量以及每帧飘字上限，其帧率、内存数据结果如下所示：
（不预加载与不飘字时游戏性能）

（预加载飘字为100，单帧上限8）

（预加载飘字为500，单帧上限8）

（预加载飘字为250，单帧上限4）

从测试数据中表明相比于预加载策略，降低单帧飘字对象上限的效果更明显些。

=================================================================================


0127日报，本来昨天已经将更换新资源的T17包打出来了，想着分析下T17的mono堆内存分配。可是bug就是这么说来就来，在启动游戏点击mono选项之后，竟然什么也没发生，
说好的游戏数据录制的呢？看了下游戏log文件，连报错都没有，无形bug最为致命。不过想到之前文森大佬说起的用logcat捕捉Android日志，继续adb搞起，
为提高安装包的测试效率，启动逍遥模拟器，并在命令行进入AndroidStudio的adb路径并输入命令“adb connect 127.0.0.1：21503” 连接逍遥模拟器。启动游戏并开启mono测试，
从AndroidStudio的logcat窗口中可以看到，在游戏开启uwa的mono测试时，虽然游戏正常进行但logcat窗口中可以看到报出了找不到目标截屏函数的错误。

没找到函数想着应该是下载的包缺少了文件，于是依文森大佬建议先用空工程测试下载的包是否完整正确。之后经过创建新工程，导入uwa文件，打包apk，模拟器安装启动，开启mono测试，数据正常录制，wtf，无语了。好吧，起码下载的包是没问题的。再仔细看报出bug的log，有两个不同的类爆出无法找到目标函数，文森说应该项目之前就仿uwa写过Java截屏相关类，
导致导入的UWA官方截屏类与之前项目仿写的Java截屏冲突了。看了下x3dgame.jar确实是有uwa的截屏函数，连类和函数名都仿了，坑啊。
问题明确，修改Java类名和相关调用，打出jar包，替换T17Android工程下的x3dgame.jar文件，重新打包。安装游戏，mono数据总算录制测试正常。

只是录制数据后，使用本地got只能进行mono的正序调用分析，而倒序分析可能的内存泄漏只能上传官网并另外收费分析，好一个门票中的门票。


=================================================================================

今天主要搞了下unity导出T17项目的安卓工程后，在AndroidStudio（AndroidStudio）进行二次修改更换目标资源，因为项目_Resources文件加下的资源是不会导出到安卓工程的，
所以为了AS打出的安卓apk包能正常运行，问了下文森了解到，需要将服务器打出的正常包解压并复制asset中的资源到导入的AndroidStudio项目的asset路径下，而和unity的Resources一样AS工程中asset文件夹路径下的资源都会被打到apk包中。
其中在AS打包时遇到manifest不能设置最低的SDK版本问题。可按照编辑器的提示修改把AndroidManifest.xml文件下的minsdkversion属性删除后还是不能打包。
搜了下百度发现，，在AS3.0后就不能在AndroidManifest.xml中设置版本最小值了，而解决方法是在资源管理器中进入对应项目文件路径，将该项目路径下的所有AndroidManifest.xml
文件中的minsdkversion属性删除。按照打包教程正常打包即可。
而在换好资源并打出apk后 ，启动安装apk游戏又出现闪退问题，查看游戏日志除报lua配置为空错误外并没有其它信息，之后文森看了下说应该是文件改动错误问题，对比了下asset中的
文件目录知道，在unity导出安卓工程时asset/bin下的为工程自身依赖配置数据不能互相替换。改回原本的bin目录下的文件后，打包出的apk就能正常安装运行。 



=================================================================================

今天，为了减少T16游戏过程中飘字对象的创建降低游戏帧率，先是和家宝测试了下在游戏场景开始时，预先创建100个飘字对象防御飘字池中，之前测试飘字出现实际最大上限
为90个，当然理论上按照飘字对象存在1秒每帧上限8且30帧率算的话需要240个飘字对象。不过，虽然在场景进入时就预先创建了100个飘字对象在 对象池，但实际真机测试却感觉
更卡了点，尽管在战斗过程中没有再新建对象，可能100个飘字对象本身就比较耗性能了。
之后继续用UWA插件测试T17的性能，只是为了测试T17在安卓真机性能需要打安卓平台包，但在测试代码尽量不上传SVN的情况下，选择unity导出安卓工程到AndroidStudio的
方式。当然，unity导出android是比较 简单的，只需要在Build Setting选择Android选项，并设置ExportProject参数并导出即可。打开AndroidStudio选择之前unity导出的文件工程 
导入项目。至于之后进行后续的资源替换并打包测试apk有待研究。

=================================================================================

0122日报，今天搞了下使用UWA插件对T16游戏进行mono性能分析，先是百度了解了下使用UWA got进行游戏性能分析的基本步骤，并从UWA官网下载了插件的SDK，
解压并导入package包，将导入插件后将UWA/prefab路径下的prefab文件加入游戏入口场景中，并保证该预设资源不会被强制删除。在安卓测试时，可通过Tools --> UWA
--> 发布安卓选项 进行打包。不过unity本地打包时遇到一个AndroidManifest merge failed错误，百度查了下错说主要是安卓Api版本过低导致的，根据错误提示选择
高于21版本的安卓Api即可。
只是在真机安装测试包后，打开游戏发现在选择mono测试选项后，游戏界面完全错乱了，百度一波暂时还没有有效的解决的方法。

=================================================================================

0121日报，今天继续解决字符串长度不合法导致无法解码后台传入的Base64密文问题，因为将密文放入在线Base64解码以及传给后台解码都能正常解码，感觉密文是问题的。
直到建彬提醒才发现密文中多了一个无效的反斜杠 \ , 而在去掉密文中的无效字符后密文正常解码。和文建讨论了下知道，在对象Json化成字符串时会在斜杠/前面自动加上反斜杠 \ ，淦。

之后改了下Laya的mouseThrough问题，严格来说着不是bug。只是因为mouseThrough设置为true时，如果sprite的skin属性有设置图片，则在图片显示区域鼠标事件是不会穿透的
（没显示到的或透明区域会穿透）；而没设置图片时，鼠标事件便会有完全穿透效果，导致感觉有的地方设置为true时鼠标会穿透，有的地方却不会。不过，虽然这么解释了，少飞还是
想要在父物体设置图片的同时也要有完全的穿透效果，感觉把图片放在子物体显示效率太低了。好吧，没办法说服，改了下Laya代码，让其在mouseThrough设置为true时不再判断
shin中图片的边界，实现完全穿透的效果。

=================================================================================

因为调用unity的AddComponent接口来动态增加组件是比较耗时的，测试表明add一次大概0.8ms。而在T16的游戏中尽管有对象池的管理，但测试显示飘字对象是在不停的创建新对象
与删除对象的，以至每次创建都会有AddComponent接口的调用以及频繁的垃圾回收，比较消耗设备性能。看池管理代码发现，首先创建对象时从该对象池中的空闲容器中取出，若空闲池没有
空闲对象则创建新的对象，而在归还对象时将该归还对象放入空闲池，并检查是否需要达到池中对象的清理条件达到则进行清理。
具体对于飘字对象池来说，其设置的空闲数量上限为15及下限7，池中对象数量上限为10及下限也是10，而测试场中同一帧存在的飘字数量往往大于15。这样当游戏某一回合结束时最后一个
飘字对象归还对象池并触发池检查时，将会销毁多余10的空闲飘字对象。而在回合开始时很有可能同一时间飘字对象的需求数量大于10，这样又得创建新得飘字对象，消耗游戏性能。
因此，该飘字对象池管理可优化方式一是增加池中对象上限，不至于较频繁得创建与销毁对象，二是优化池对象清理时机，让其在战斗结束时而不是对象归还或某一小阶段结束时清理。
当然感觉对象池的的管理与释放可以根据具体设备内存大小进行，游戏占用内存达到一定量时根据对象资源的的重要程度进行清理。

之后查了旭军报的混淆网络的bug。其报错原因为C#中base64解码接口只能解码4的倍数的Base64密文，但后台传过来的字符长度却不是4的倍数长度，只是用在线Base64解码工具又
能正常解码后台密文。搜了下解决方法，感觉是Base64工具问题，还有待确认下文建后台的Base64编码工具能不能解码接收的密文，以及后台生成的密文原文。

=================================================================================

首先之前的 FlyWordMgr:Update 代码块之所以一帧运行680多次，是因为scene_key_map在使用时只往其中存入对象而没有进行清除管理，导致其随着游戏的进行的时间越长
容量不断变大，之后和文敬反应后增加了飘字map的管理。只是虽然改进了飘字map的管理，但结果显示游戏掉帧率的频率还是较高的，脑阔疼。不过在关闭飘字后游戏性能确实相对稳定
在30帧左右的帧率。

继续定位耗时代码，发现在lua飘字功能回调C#的HUDText.begin接口时，其耗时达到平均每次调用耗时1ms的情况，当其一帧调用5次该接口时总耗时8ms以上，导致游戏的帧率
受飘字回调接口的很大的影响。而当飘字回调接口限制在1~2次时，游戏帧率也就相对稳定不在25~30帧率变化。


=================================================================================


接着研究下T16的性能问题，深入研究了下之前发现的在游戏帧率较低时往往lua的SceneBoardMgr的update()函数的耗时较高现象的原因。而在Profiler面板连接真机实时测试中选中
SceneBoardMgr:update项，图像显示确实伴随着SceneBoardMgr:update的高耗时游戏帧数也往往较低，如下图所示。
因为在使用Profiler面板中，还无法深入研究到底是update中的那块代码，为什么耗时这么高。问了下文森之后在相关lua代码中加了性能检测代码，打包测试，查看加入的代码性能监测
模块发现，在低帧率时具体消耗时间的是lua双循环的飘字代码，且从记录中可知该代码块在该帧中调用了780多次。而继续运行游戏测试中该代码块运行的次数也不同，当然至于为什么该代码块调用的次数差距突然变得变化这么大还有待继续研究。


=================================================================================


0116日报，在通过控制可能的单个游戏角色进行游戏性能测试后，发现在有游戏“太阳神”角色上场后游戏帧率变得非常不稳定经常在15~30FPS之间波动。进一步对比测试
游戏中当该角色有喷火的攻击特效和没有喷火特效时的游戏数据可知，没有喷火的特效的游戏帧率一般在30帧左右波动，而有喷火特效的帧率比较不稳定，尤其是在特效攻击刚出身的
小怪时帧率经常调到15FPS左右。具体帧率如下图所示，不过感觉这解析出的趋势的图相比观察的真实数据普遍低了点，没有连接unity的Profiler工具反应的准确。

而从耗时帧的耗时脚本详情看，相比一般30左右的帧率，15左右帧率耗时主要是lua脚本耗时较高。尤其是SceneBoardMgr的update()函数的耗时明显的高于正常帧，具体如下图所示。

其中为通过unity的Profiler工具察看T16游戏实时性能，弄了下unity的profiler工具连接真机游戏数据调试，一般具体过程：
1、手机用数据线连接电脑，并且手机打开usb调试。
2、在windows命令行窗口输入SDK的adb devices命令，查看设备连接情况，若显示没有可连接设备则装下相关手机驱动。
3、继续命令行输入命令：adb forward tcp:34999 localabstract:Unity-com.qdazzle.t16game（34999为unity的Profiler工具的adb端口，com.qdazzle.t16game为游戏包名）
4、输入命令：adb forward --list,查看端口连接状况，
5、安装打好的勾选Development Build设置的游戏包，运行游戏，
6、重启unity并打开Profiler工具窗口，点击recard和Editer按钮下选择adb即可实时观察安卓手机运行游戏的性能状态。


=================================================================================

0115日报，为了测试T16在安卓手机掉帧问题，在安装最新的测试安装包后，在协同模式下测试了不同阵容的帧率问题，显示当玩家阵容中有一些有问题的角色时，会有掉帧率的情况。
为进一步确认具体角色调帧率的原因，想着把有问题的模型单独一个个测试，结果发现游戏队伍中的英雄只能替换而不能卸下，再加上出战又是从队伍中随机挑选，要单独测试只能
看脸了。之后，跑完数据退出提交分析平台，在经过上传和解析后结果解析失败。好吧，还是直接用unity的Profiler工具测试吧。
在Editor模式下，对有问题的角色英雄测试发现，游戏中当问题角色攻击出生的敌人时，游戏帧率经常掉到15帧左右。查看 Profiler面板，对于耗时较高的帧其主要耗时在GC回收
和lua中update函数模块，而至于其具体是角色技能特效原因还是模型什么原因还有待研究下。

=================================================================================

0114日报，T14同步并测试了下优化后的网络混淆代码，没有问题。当然后来文森测试了下T16的center包网络混淆报了个链接bug，检查发现是后台漏了对游戏的该接口混淆，
补充混淆后正常混淆访问。
之后为查找T16在安卓平台跑一定回合后漏帧问题，看下了游戏性能方面的资料，如unity的Profiler模块（https://zhuanlan.zhihu.com/p/138819732）以及性能分析，
感觉unity在各平台下都可以连接Profiler分析确实很方便，虽然来自平台的特有工具的分析报告有时可能会更好，像Android的SnapdragonProfiler， iOS的Instruments 和 
Xcode Frame Debugger等 。
不过在安卓模拟器测试跑了几十回合并没有出现卡顿掉帧的现象，只能之后用安卓真机跑跑看了。

=================================================================================

因为当游戏多开的被打开的log是不能删除，而需要在下一次开启游戏时进行管理，删除之前的且没有被打开的log文件，以免之前的log文件积累占用内存。打包测试了下昨天的代码，
结果游戏可以多开但历史log文件却没有被删除，检查实现的代码主要原因是：在log.in中当第一个用于缓存的log文件是已经打开时，由于替换不成功没有被从新放回log.in中进行管理。
导致上一次打开的log文件在下一次中不能被删除，之后在把缓存替换不成功的log追加到log.in进行管理后，游戏多开时也不会增加多余的log文件。

过程中本来是想增加一个获得文状态的接口，后来旭军说接口引用的kernel32.dll库是windows内核库，应该在Android和ios是用不了。百度了下kernel32.dll库并没有找到什么有效的
Android和iOS使用kernel32.dll库的，所以之后判断文件是否能删除就用try...catch...代替了，简单高效安全。
之后将同步了T14的QLog代码，以及改了下混淆代码将混淆开关放置platform.lua并增加php下发的审核字段控制混淆开关。


=================================================================================

0112日报，处理了下windows下游戏不能多开的问题。游戏表现为在多开游戏时，之后的游戏进程黑屏，不能进游戏。看了下QLog类的日志代码，了解日志的大致的生成过程。
因为log.in日志是用于保存本次游戏日志名字以便下次替换本次日志，测试发现在第二次开启时Log.in日志的内容会被清除但确不会生成第二次的新的日志名字，而在第一次开启后，
删除Log.in中的日志名则可以正常开启第二个游戏进程。所以大概了解是在记录当前游戏日志名字时出bug了。
找到QLog中的对应代码仔细看了下，应该是在游戏多开时移动上一次游戏日志而上一次的日志又是打开状态，导致游戏日志操作冲，处理了下文件操作异常游戏正常多开。
因为多开的日志文件不能删除，要在下一次的重启时删除，而为避免多开的日志累积，之后修改了下游戏日志生成代码。

=================================================================================

今天在测试Java多语言接口时，本来在X3DGameActivity中的SetLanguage接口设置了log日志，但打安卓包测试发现打的log在log文件中都没有记录，只是C#调用Java的返回值又是正确的，
问文森说将模拟器中运行的游戏app日志打到AndroidStudio中看看有没有log记录，之后在百度搜了下怎么将安卓模拟器中的游戏日志打印到AndroidStudio中，因为我用的是逍遥模拟器，
其连接AndroidStudio的方式主要为：
1、打开模拟器，
2、在dos窗口中进入模拟器的安装目录，
3、并输入命令：adb connect 127.0.0.1:21503，如果提示adb不是有效内部命令的话，只需要将AndroidStudio安装目录下的adb.exe运用添加到系统环境变量中的path变量中即可。
4、运行app
在运行后发现，如图所示Android的Log.e()和Log.d()两个log都打印到AndroidStudio了，这表明SDK是可以获得游戏设置的语言的。至于QLog为什么游戏日志和AndroidStudio中都没有打印。
看了下实现代码发现QLog主要是通过unity的Unityplayer.UnitySendMaeeage("GameMain", "JavaToUnity", data)接口将日志信息打印的游戏日志中的。因为JavaToUnity()接口在PlatformMsghandler
脚本，且在设置游戏语言时，该脚本还没有挂载到GameMain对象上，所以导致此时日志信息不能记录在游戏日志文件中。解决方式，调整下设置SDK中游戏语言的时序即可。



=================================================================================

0109日报，今天用AndroidStudio重新打包了一下BaseLib多语言安卓库，相比之前的jar格式打包，baselib则要打包成aar格式，网上查了下aar和jar的区别：
xxx.jar：只包含了class文件与清单文件，不包含资源文件，如图片等所有res中的文件。
xxx.aar：包含所有资源，class以及res资源文件全部包含。
而对于BaseLib项目的打包，因为要带有多语言文件资源库，所理所当然选则打包aar格式文件。而打aar包方式也很方便，在Android Studio编辑器中点gradle-->app-->Tasks-->build-->assemble
即可将library库打包成.aar文件并生成在build/output/aar下。
之后在文森看了下混淆过程后，建议更新下网络混淆的实现方式。因为开始时是用临时的域名接口的实现的不同接口对应不同的临时域名，之后在换上正式的在正式的域名混淆好后，
就不在需要记录不同的域名了。只需要将正常域名连接中的接口改正混淆接口“gateway”，再加上混淆参数就可以了。最终删除了不同混淆域名字段，并把一个混淆开关移到了EngineConfig.lua中，
方便网络混淆的开关。


=================================================================================


0108今天继续修改多语言了文档，在经过大佬们的讨论后增加了多语言的语言简称表和目前已配置的SDK多语言库表，并根据语言简称表修改`Plugins\Android\res` 目录下SDK多语言库名称，
在修改多语言的md文件时，文森推荐VScode插件Markdown Preview Enhanced确实挺好用的，在编写文档的同时，还可以实时查看md文档的效果。

之后文森建议PlatformInterfaceManager中的language字段删除，因为PlatformInterfaceManager并不是所有SDK的类都能访问到。而且游戏设置的语言已经游戏开始时用
Unity3DHelper.saveLanguage()接口已经保存了，同时也能用 Unity3DHelper.getLocalLanguage()进行获取。所以就把删除了，并修改了X3DGameActivity类和unity3dHleper类中对应的接口


=================================================================================

0107日报，主要实现游戏中资源的多语言功能本来是想考虑兼容游戏活动中资源的多语言功能，不过后来文森说游戏活动中使用的较少暂时不用考虑，就实现了下基本的多语言资源
路径获取的接口。本来之前已经实现的不过放在languageCtrl中，因为在应用启动的资源加载界面中可能也要使用，但游戏中languageCtrl.lua的加载又比PlatformLoadingView.lua的要后，
导致PlatformLoadingView不能使用多语言资源接口，所以就把该接口放在PlatformLoadingView中实现。并更新了多语言文档（网页清理浏览器缓存可见更新）。

不过在改用lua的string.gsub()接口实现语言后缀插入资源名称时遇到一个小坑，就是本来想用“.”做定位器将其换成“_xx.”来达到插入语言简称后缀的目的，不过在使用该语句时出现意外，

如执行语句：string.gsub("abc.xxx",  ".",  "_zh")，结果返回的不是“ abc_zh.xxx”，而是“_zhbc.xxx”。

百度查了下该lua接口发现（https://blog.csdn.net/weiyuefei/article/details/52044235），该接口是支持模式匹配的，而“.”字符在模式中表示任意字符，所以才导致了上面把第一个字符“a”替换成“_zh”的结果，
而要实现替换“.”的目标，看gsub注释可以发现可以用如下语句实现目标string.gsub("abc.xxx",  "%.",  "_zh")，返回结果“ abc_zh.xxx”

string.gsub (s, pattern, repl [, n])

Returns a copy of s in which all occurrences of the pattern have been replaced by a replacement string specified by repl,which may be a string, a table, or a function. 
gsub also returns, as its second value, the total number of substitutions made.
If repl is a string, then its value is used for replacement. 
The character % works as an escape character: any sequence in repl of the form %n, with n between 1 and 9, stands for the value of the n-th captured substring (see below). 
The sequence %0 stands for the whole match. The sequence %% stands for a single %.      
-- %是作为lua中特殊的转义字符，即%%代表的是一个简单的%符号


=================================================================================


今天为了打Java语言代码修改后的jar包，安装了AndroidStudio，安装时跟着教程倒是没遇见什么问题（https://blog.csdn.net/qq_41976613/article/details/104394870），
当然如果遇到gradle下载被墙时，也可以复制官网的下载链接并使用迅雷下载（效果明显），之后再自行安装gradle包，https://blog.csdn.net/weixin_44341427/article/details/108544987
安装完AndroidStudio后，导入T16的u3dgame_android工程，并进行工程编译（点击编辑器上的小锤子图标），刚安装AndroidStudio编译工程时间较久，
在编译好后可在默认生成路径build/intermediates/packaged-classes/debug下查看jar包，默认生成jar包名字为classes.jar，

在jar包生成好后，修改默认名字为x3dgame.jar。之后更新到项目的Assets/Plugins/Android/bin/路径下，不过为了确保jar的正确性，可用jar包的反编译工具进行查看，


补充点小知识就是，在Java调用unity中C#函数时，可通过unity生成的unity-classes.jar中unityplayer包中的UnitySendManees()函数即可

UnitySendMessage
com.unity3d.player.UnityPlayer
=================================================================================

0105日报，验证T15项目的下发审核服接口时，又遇到了之前不同项目域名中项目名txx和manager位置顺序问题，因为有些项目中项目代码在manager前，而有些在后。导致后台在T15中返回
mobile_config接口的plat_url字段时把项目域名中的项目名txx和manager位置顺序能错了，结果游戏用plat_url下发的错误域名时一直加载不出登录界面而卡住。在后台修改mobile_config接口后，
T15可以正常登录游戏并获得下发的审核服状态了。经测试T13、T14、T15都可以正常获得后台下发的审核服状态。

之后改了下sdk通过继承X3DGameActivity来获得language问题，解决方式为：将X3DGameActivity中的language字段放到PlatformInterfaceManager中，并修改了游戏启动时X3DGameActivity中
设置language的代码。Java在导入PlatformInterfaceManager所在包之后，通过调用PlatformInterfaceManager单例便可以获得游戏之前玩家设置或系统的language。

=================================================================================

0104日报，在和后台沟通后把T13~T5项目的mobile_config接口都支持下发审核服状态开关，不过后台说u3d域名是不支持下发审核服状态开关的，于是就把u3d域名改成了manager.T14域名，
修改后如下：

之后在测试新的入口时发现，游戏的文件差异化对比是没有问题的，但就是卡在登录加载界面进不去游戏，仔细看log发现，虽然游戏并没有报错，但有一个连接返回没有指定文件，
对比正常的u3d域名，发现该连接多了一个路径层级。在lua中查找连接发现在phpnet.lua中对于没有“http://”协议的连接会加上了默认的http://develop.t14.com/连接协议。
最终查看ulr的生成调用发现，ulr是从mobile_config接口的后台返回的MobileTable表获取的，和正常访问的u3d域名mobile_config对比发现，新的plat_url参数竟然少了“http://”协议标志。
问题解决办法，在接收mobile_config返回值是在plat_url参数值前加上“http://”协议标志，或让后台返回值中带上“http://”协议标志。


=================================================================================

1231日报，今天把文森说的要把T14的126私有混淆接口换成正式的接口，在测试正式接口时发现差异化接口有概率获取MD5数据的现象，反馈后台后查找原因说是因为执行差异化代码
权限不够造成的，修正后正式混淆接口可以正常使用。之后继续学习了T14H5项目游戏的主状态机，而对于之前提到为什么新开GameloopStateBase状态基而不是
直接继承StateMachineState状态机状态类，感觉主要原因是考虑到游戏有多个状态机的情况，不过好像T14H5暂时只用到main状态机，不同状态机状态可能出现的不同功能需求，
把共有的功能提取到StateMachineState编写，具体的状态机特有的功能放到对应的状态基类中，甚至在具体的状态机中扩展StateMachineState中已有的方法，如在一个StateMachineState
对象中初始化具体状态机状态时，同时赋值相关的执行函数，实现Enter，Excute，Exit等共有方法的扩展，使得游戏状态机框架能有很强的扩展性。
而对于T14H5项目中main状态机的运行，先是由LogicManager进行gameloop初始化，在gameloop单例中实例化main状态机，并将GLSResourceUpdate，GLSLogin，GLSLoading等具体
游戏状态实例和方法进行注册。以及通过LogicManager中的update最终执行gameloop单例中main状态机当前状态的StateUpdate，如判断满足条件时进行状态切换。而对于
游戏main状态切换，调用gameloop中列出的对应的跳转接口即可，感觉这里跳转接口可以合并为一个并传入具体状态的枚举会合理点。


=================================================================================

下午参加了公司的新员工入职培训，除了讲些公司规章制度外，感觉培训中对当前游戏题材玩法系统分类以及游戏行业历史发展，与当前流行与未来趋势讲解还是不错的，
听完对游戏行业的平台及用户发展有了大致了解，知道游戏需要面对的iOS严格的应用审查。
之后和后台沟通了在mobile_config返回中支持下发审核服字段，并在ClientInfo.cs0中增加审核服开关字段用于接受保存是否为审核服状态。


并看了下代码设计的“经济 ”原则，一个简单、高效、安全的代码才是好代码。

=================================================================================

今天先是提交T16多语言简称统一代码时，不过开始打算兼容项目组的之前代码，后来文森说这样以后还要改太麻烦就改成统一的loading.lua文件中的语言简称了，
之后在整理好多语言接口文档后叫伟航帮发布了下。不过在整理时发现有点不明白X3DGameActivity类又是干什么用的，问文森了解是项目中通过C#调用AndroidJava代码，
传入语言参数实现游戏启动时设置当前游戏语言，以便AndroidJava方面获取玩家设置的游戏语言。

于是，研究了下Unity与安卓Java的交互（https://www.xuanyusong.com/archives/667），在unity与Java的交互中，首先用eclipse等工具打包出jar包放入unity工程的
Aessts/Plugins/Android/bin下面，并把该Java工程中res下的资源复制到Aessts/Plugins/Android中，不过好像unity2018以后只需要把Java文件放到Aessts/Plugins下，
然后在Inspector面板设置一下文件属性就可以了非常方便。之后就是在C#中调用Java方法：
1、获得Java类：     AndroidJavaClass jc = new AndroidJavaClass("com.unity3d.player.UnityPlayer");
2、实例化Java对象： AndroidJavaObject jo = jc.GetStatic<AndroidJavaObject>("currentActivity");
3、调用Java方法：   jo.Call("JavaFunc","args");

=================================================================================

今天先是学习了一下游戏状态机(https://blog.csdn.net/turkeyzhou/article/details/7695813)，在游戏中当实现较多状态的角色时，如果把动作全写在一个部分中
复杂的判断逻辑会导致过多的if-else，增加维护成本，拓展性低。而使用状态机可以灵活的利用面向对象语言的多态特性，使得新的状态只需要关心自身状态功能的实现，
降低程序模块间的耦合度，利于分工合作。当我们需要添加了一种新的状态时，就不需要去修改很长的条件判断语句，而是构造一个新的状态类，修改它的前序和后序状态类就可以了。

而在T16H5项目游戏中，当把整个游戏流程看成一个个状态（加载，登录，更新，操作游戏，重启）切换时，也游戏就成了一个大的状态机。其中gameloop类包括状态机实例的创建，
将子状态注册到状态机实力中，游戏状态的切换。而GameStateMachine则主要保存和管理StateMachineState状态实例，有点类似于对象池，只是对象池主要保存大量相同类型的实例，
而状态机则主要保存不同状态对象，且也是通过update每帧判断类实现状态间的切换。同时StateMachineState类在创建后将对各具体的子状态进行关联，实现对具体子状态目标函数接口的。
如当游戏切换至登录状态时，状态机将切换至游戏登录子状态(gameloop_login)，并状态进入函数中获取设备信息，打印日志 ，创建登录界面的操作。不过，这里为什么各子状态不是
直接继承StateMachineState状态机状态，而是新开一个GameloopStateBase游戏循环状态类来继承有点疑惑，还有待继续研究。之后晚上改了下多语言文档，同一项目中各语言的简称。

=================================================================================

今天继续完善了LayaT16项目的动画测试工具，过程中为了确定动画需要配置哪些属性，发现本来res/jsonconfig.json里面应该有动画配置属性的信息，如res/config_res_skill_effect信息，
但文件中却没有。不过之后在文森说的另一个完整的H5的QdazzleDemo项目找到了动画属性配置相关信息。工具最终实现实现效果如下：

记录下在实现过程中遇到一个知识点是Laya在获取目标对象的组件属性内容时，看项目的其它view面板在获取对象组件好像并没有发现用getComponent()接口来获取，
后来搜索了下发现Laya可以在编辑面板中直接设置组件的var属性作为唯一ID，而在脚本中直接申明该组件ID就可以使用了，而在游戏运行时环境中自动关联对象实力，
实现获取目标组件的目的。


================================================================================== 

为了让美术能察看完成的美术资源的在T16项目中的效果，以及设置调节相关动画参数，需要实现一个方便察看的工具面板，在实现过程中主要遇到了两个问题，
一个是在点击播放动画后动画不能居中播放，之后开始看来下Laya的坐标相关资料，本来想通过动画的width属性来计算偏移量，从而设置动画的pivot属性的偏移值来
实现动画居中播放，但测试发现animation的width属性一直是0，之后百度搜索也没发现什么获得动画的对象宽高的方法，问文森说这是要美术根据图片的大小及测试后配置的。
之后先暂时给了合适偏移值测试工具效果。
之后遇到的一个问题是在用laya的ComboBox组件实现一个动画类型下拉框时，发现实现的下拉框在点击之后并没有下拉列表，于是对着Laya官方文档检查代码也没什么问题，
无意间调了下下拉框的位置发现，下拉列表竟然是被背景图挡住了。看起来表头和下拉列表是不在同一渲染层级了，查了下接口也没有修改下拉列表的渲染层级接口，最后还是把
父级容器的渲染层级由10000调成1000才让下拉框正常显示出来，感觉是引擎新创建出来的下拉列表有一个默认的渲染层级。


================================================================================== 

今天主要学习了在T16项目中创建游戏动画对象，并梳理了下动画加载管理类的关系：

在其对象创建过程主要经过操作有：
1、先调用MyAnimation.Rent()接口从对象池中取出一个MyAnimation对象，该接口又通过调用ObjectPool.RentObject()接口进行对象池中对象的创建和取出；
2、设置MyAnimation对象的名字；
3、调用AnimationManager.AnimationLoadRes()接口并传入MyAnimation对象，动画类型，动画图集真实名，回调函数等参数，而在该接口中主要操作有：
     （a）设置MyAnimation对象的相关参数，如动画的中心位置，动画的缩放大小，动画的帧间隔（播放速度），
     （b）将MyAnimation对象在animation_res_pool（动画图集资源池）中注册对应的动画类型和资源名，若没有则新建AnimationResItem进行注册，
     （c）在没有现有注册资源项时，调用Animation.loadAtlas()接口加载动画，在接口设置名字后动画自动缓存，下次根据名字从动画缓存区取出播放即可，
4、动画加载成功后，将动画挂载到stage舞台进行显示；
5、MyAnimation.player()播放
6、使用完后调用MyAnimation.GiveBack()接口归还，该接口先是调用AnimationManager.SubAnimationResCount()取消animation_res_pool的注册，
之后调用ObjectPool.GiveBackObject()将取出的MyAnimation对象重置属性后放回m_idle_key_map（空闲对象池）。

不过在创建时，碰到一个加载的动画对象不存在的报错问题，在dubug测试后发现路径资源路径加载不正确，可能是项目改了文件路径，
修改一下animation_res_config的资源路径即可正确加载动画图集了。不过之后虽然没加载报错，但场景就是就是没有先是目标动画，后来想着可能是渲染顺序问题，
在改动画的zOrder属性后可以在场景正常播放了。



================================================================================== 

今天先是修改了游戏延迟重启的实现方式，不过开始使用lua全局函数传入TimerQuest:AddDelayQuest接口，发现其出现lua函数信息获取错误，
在查看其它对该接口的引用时，发现其传递函数为函数内部的局部函数，之后改成局部函数传递后就可以正常延迟重启游戏了。

之后主要了解LayaAir引擎的基础渲染及Sprite显示类，以下对了解的知识进行大致梳理，首先对于Laya引擎来说，在渲染绘制一个2d图像时主要需要用到Render类，
Stage类，Context类，Sprite类，以及RenderSprite工具类。其类的基本结构如下：

Render类调用Stage类的render方法进行绘制，而Stage类的父类是Sprite类，Sprite类是通过调用RenderSprite类的方法进行绘制。
在Laya引擎中，主要通过Render类进行渲染管理，如创建画布，初始化渲染器，调用stage中的loop函数，元素可见性修改，而Render是一个单例类，并在Laya.init中进行实例化。
对于stage类是放置显示对象的最终容器，并显示游戏元素，只有游戏元素添加到舞台才能被显示。所有的渲染过程也是从Laya.stage开始的，
并在loop帧循环函数进行当前context渲染上下文的渲染和更新逻辑。而在loop中的渲染又是通过调用sprite父类的render()渲染接口进行的。而最终也是调用Context类中的方法
传入renders渲染序列（对应的RenderSprite工具中的不同渲染操作，如位置变化，旋转缩放，透明度变化）进行图像渲染。
其中Sprite为Laya引擎中游戏图片开发的重要元素，是基本的显示图形的显示列表节点。同时sprite作为也可以用来添加多个子节点，以及进行碰撞检测和排版，响应点击事件。


================================================================================== 

今天在整理多语言接口时，遇见了在玩家设置切换语言后，需要延迟一帧进行游戏重启，搜索了解到因为游戏语言是用Unity3d中的PlayerPrefs
进行保存的，而默认Unity 在程序退出时保存参数，所以为确保设置的语言已保存本地而有了延迟一帧重启游戏的需求。一开始打算在引擎的XDevice类中用协程
实现游戏重启时，确保延迟一帧的需求。不过，后来旭军建议最好不要在C#中写，可以在lua中用update实现延迟。为了尽可能保持程序的可扩展性，
方便游戏编译及安装后的功能扩展，能在lua中实现的功能尽量在lua中实现。
之后在通过使用main.lua的Update主循环中添加延迟重启update，以及在延迟重启update计算延迟帧数代码实现了游戏延迟帧数重启的需求，
当调用延迟重启接口时，游戏将根据调用的延迟帧数进行延迟重启。不过，因为之前接触的引擎代码主要 C#，有些固化思维逻辑lua主要为项目编写管理了，
导致把延迟重启接口写在了PlatformLoadingView.lua中，在文森检查后说不要写在PlatformLoadingView.lua中，而应该写在lua_source模块，完善T16引擎模块方便后续 
可以以此为模板，最后将延迟重启接口移到了lua_source/language/language_ctrl模块中。
而在实现游戏资源的多语化接口时，暂时设计实现主要将多语言资源放于同一路径下，然后以名字+语言简称为后缀命名区别，在加载读取多语言资源时，
调用多语言资源接口，传入名字获取资源的完整资源名。



================================================================================== 

今天在学习laya项目动画池管理时，发现动画池的管理有两个池的存在，
一个是由AnimationManager单例模式中的animation_res_pool池，主要存放AnimationResItem对象，另一个为myanimation继承ObjectPool类的m_obj_map池，存放
开始有些不明白为什么动画管理需要两个池，后来问文森说animation_res_pool池主要用来管理图集资源，m_obj_map池则主要用来管理动画对象资源，
而动画对象的卸载并不一定图集资源也要卸载。继续了解发现，对于一些动作较多的角色动画，在打图集时会分开，以免在加载图集时过大，把那些没用到的动作资源都加载进来，
造成资源浪费；而对于一些动作较少的角色，在打包成图集时为减少图集文件资源的占用一般将其打包成一个图集，而此时当图集中的某个动作要销毁时，
因为图集中包含多个角色动作图片资源，所以此时动画所在图集却不一定能卸载该资源，从而导致图集的卸载和动画的卸载是分开管理的，即animation_res_pool主要管理Laya.loader.load
生成的图集资源的加载和卸载，而m_obj_map则主要管理Laya.Animation.loadAtlas生成动画对象。

之后了解了下Laya资源加载 LoaderManager和Loader知识点。https://www.cnblogs.com/chiguozi/p/9602430.html
其中LoaderManager是Laya加载资源的统一入口。此类是单例，且请通过Laya.loader访问。全部队列加载完成，会派发 Event.COMPLETE 完成事件；如果队列中任意一个加载失败，
会派发 Event.ERROR 事件，事件回调参数值为加载出错的资源地址。主要提供：批量加载资源。，多线程，多优先级， 重复过滤（复用缓存），错误重试功能。
而Laya.Loader管理laya的加载器，负责控制加载优先级，加载线程维护与上限上线控制，加载失败后重试等操作。在laya中使用的 Laya.loader.load 是LoaderManager的实例中的load，
而不是Laya.Loader的实例的load。另外，值得注意的是不管加载成功或者失败都会出发COMPLETE事件，调用complete方法。


====================================================================================

1219主要学习laya的帧动画的创建与管理，在laya创建帧动画时，主要由美术组给出主角，npc，怪物等角色的系列动作资源图，
然后导入laya项目laya/model/对应角色名文件夹中，并正常为按动作名+序号取名或加一层角色动作层级文件夹+动作序号，
之后在laya编辑器的编辑模式下设置动作资源图片的属性为打包，
按F10进行打包成atlas文件，一般动画模型打包后的图集文件默认放在bin/res/model文件夹的对应角色下，
对于帧动画的创建和加载，主要通过animation类进行，代码如下；

而项目中对动画的管理，主要由AnimationManager、myanimation和objectpool类进行加载和管理，
在首先由AnimationManager进行资源的加载中，并loadAtlas方法中设置动画资源的缓存名字，使laya引擎自动对动画进行缓存，
并创建不同动画类型（如：技能特效，场景特效，主角，npc怪物等不同）的myanimation对象池于AnimationManager中进行管理。
在播放时，则调用对应myanimation池中的player方法传入创建时设置动的动画名进行播放，以及对池中动画取出Rent和归还GiveBack。


loadAtlas(


====================================================================================

1216主要处理T16加载界面的多语言问题，先是删除了loading.lua文件中多余的字段，并将其分成中文（zh）和英文（en）语言表，
不过在将PlatformLoadingView.lua文件中的字段也做多语言支持时，发现用require、import进行模块导入时会对 " . "进行斜杠“/”处理，
这导致无法导入上一级目录模块问题，其解决方式为在C#脚本中，在目标lua虚拟机中添加上一级目录路径后，lua模块才能加载上一级路径模块或其它非子路径的模块。
之后再通过读取LoadingModule表中的对应语言表数据赋值给对应变量，实现游戏资源加载更新界面的多语言支持。

之后测试了T14项目在引擎网络接口混淆后的问题，其中后台给出的gameApi接口在混淆链接连接时是没有问题的，而api的后台混淆接口在连接数据库错误时会直接返回数据库的
错误信息，导致解码失败，以及连接mobel_config_api混淆接口时会返回html的代码格式，导致解码失败。

====================================================================================

1215日报，先是测试了连接混淆代码在T17项目中在加上开关后是否可以运行，测试表明是可以运行的，如下图所示，
在混淆开关关闭后项目是可以正常运行的。



测试了base64编码加密后相比原文的文本大小改变了多少，而计算表明在该混淆模式下混淆加密后的密文相比原文增加了大约1倍的大小，
其base64的原理主要为：Base64编码要求把3个8位字节（3*8=24）转化为4个6位的字节（4*6=24），之后在6位的前面补两个0，形成8位一个字节的形式。
如果剩下的字符不足3个字节，则用0填充，输出字符使用'='，因此编码后输出的文本末尾可能会出现1或2个'='。所以理论上base64编码后的文本比原文本大8/24=1/3
为了保证所输出的编码位可读字符，Base64制定了一个大小为2^6=64编码表，以便进行统一转换。


而在文本较小时，加上分段时增加的随机key值，导致在文本不大的情况下密文为原文的2倍，而在密文足够大时，导致key值增加的影响越小，在该混淆模式下其比值将越接近4/3.

之后为了获得loading.lua文件中加载模式LoadingModule表中的不同语言表，增加了一个在Tolua中有的获得ulua表中表的接口，



====================================================================================

因为在实现引擎网络混淆时要对连接数据进行加密，于是在百度了解了下当下主要的加密算法状态，
其算法主要性能对比如下：



对比而言，考虑到游戏的强实时性，所以在实现时选择了运行速度快，资源消耗低，安全性也较高的AES加密算法。
实现结果如下：


在上图中，为模拟连接携带的数据内容，将加密后的密文数据分成了随机若干段，组成键值对的形式并按键的字符串排序顺序赋值。




=Build（）============================================================

==BuildLayout（）==========================================================
打包UI面板时，收集图集和icon的依赖关系，并写入lua配置文件，
打包layout的时候导出面板资源映射文件，用于海外多语言，当发行地域不同时加载不同的资源文件。

==BuildFont（）==========================================================
（在字体打包时，未前置做资源版本检测）
当字体不是静态字体时，直接对字体文件打包，否则先检测静态字体文本内容是否有改动，若有改动先更新字体包信息再打包。

==BuildUIAtlas（）==========================================================
图集打包打包时，检测图集版本，提高打包效率，
将图集对应的材质球的shader清空，并将图集对应 的png图片转成无损压缩的webp格式，减少图片体积的同事保证其质量，
保存并刷新资源，
检测图集mat，强制其它人将这个mat文件提交到svn，方便修改图集，创建图集包 。

==BuildIcon（）==========================================================
Icon打包，
对于有无损需求的Icon都进行重新打包，否则检查Icon版本是否改变，若改变则进行重新打包。
并在图片文件打包前先把png格式的Icon转成webp格式再打包。

==BuildDynamic（）==========================================================
当有Dynamic图需求的项目打包，需要先生成Dynamic图的配置lua文件，将动态图片的名称和路径保存在lua表中。
之后Dynamic图的打包同样先检查是否有无损需求，以及版本变化，最后转webp格式后打包。


将Icon创建信息保存/_Resource/Textures/UI/Icon/BuildIconConfig.json文件中，管理已打包Icon的文件，
同样已创建的Dynamic图的创建信息将保存到/_Resource/Textures/UI/Dynamic/BuildDynamicConfig.json文件中。

-----------------------------------------------------------------------------------------------------------------------------------------



T16项目场景资源打包的一般过程和问题方面

=build（）start ============================================================
场景打包前更新shader渲染
场景的预设 ShaderGlobalControl  prefab
场景版本是否更新，打包要判断所有依赖文件的版本号，使资源版本不变的资源，提高打包效率
在打包前判断是否需要重新烘焙场景，合并光照贴图和shadowmask贴图，保存场景修改，
检查并删除场景更新后没用的依赖资源。

==DoScene（）start===========================================================================
（做打包时检查场景的资源是否符合优化，并打包）
检测场景的反射探头模式是否为runtime以及反射探头的数量超出限制的，为runtime则返回false，
删除未激活物体，删除mesh为空的组件，删除非Collider下的组件[Collider]，
物体[" + rd.gameObject.name + "]含有MeshRender组件却没有和MeshFilter配合使用或者材质球为空，将被删除，
场景的结点 中使用的材质使用的shader的名字不包含 Q/Scene, 请检查使用是否合理，
再prefab制作过程中，当删除prefab节点时，可能会产生多余的依赖引用，打包时需清理引擎资源库资源中冗余依赖的prefab资源，
保存场景修改，
调用BuildPipeline.BuildAssetBundles(outputPath, op, EditorUserBuildSettings.activeBuildTarget)接口，打包当前场景资源到
项目的Application.dataPath/StreamingAssets下的对应目录中。
删除在创建场景中临时创建的过度预设和文件资源。
==DoScene（）end===========================================================================

==BuildSceneBundle（）start==============================================================
将打包后的场景大小信息通过wwwfrom和www类在update中上传只服务器，监控场景版本的异常。
删除项目StreamingAssets路径下的就的场景资源信息，优化内存资源。
将打包的场景版本名字信息保存到项目Application.dataPath + "/../abNameForScene.json"文件中，以便打包场景版本和AB包进行管理
==BuildSceneBundle（）end==============================================================

==GenerateAllSceneEffectConfig()  start============================================================
生成场景特效信息（包括特效名字、AOI同步类型、hash值、特效等级、场景位置、旋转、大小）的lua配置文件，
并保存到luaPath + "/config/sceneinfo/effects/effect_info_{0}.lua"， 以便通过lua脚本对场景特效进行控制。
==GenerateAllSceneEffectConfig()  end============================================================

=build（）end ============================================================





























